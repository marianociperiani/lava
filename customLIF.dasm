// INTEL CORPORATION CONFIDENTIAL AND PROPRIETARY
//
// Copyright Â© 2021-2022 Intel Corporation.
//
// This software and the related documents are Intel copyrighted
// materials, and your use of them is governed by the express
// license under which they were provided to you (License). Unless
// the License provides otherwise, you may not use, modify, copy,
// publish, distribute, disclose or transmit  this software or the
// related documents without Intel's prior written permission.
//
// This software and the related documents are provided as is, with
// no express or implied warranties, other than those that are
// expressly stated in the License.

/*
  CUBA LIF neuron model.
  Closesly matches the hardcoded LIF model except for negative
  saturation behavior of V. An exact match can be found in lif_hc.dasm
  at the expense of half the performance.
*/

// Describes how the thread is started and stepped
.RmwCA=1
.RmwDA=0
.StrideCA=1
.StrideDA=1
.StrideSA=1
.StridePA=0

// Constants which must be defined and compiled into the program
.constant:vth
.constant:du
.constant:dv
.constant:charging_bias
.constant:t_half

// Aliases for variables
.var:da@t0ls
.var:time@t7bu

// Structure to be used by Python to access compartment memory
.mem:CA[0] {
 ls u;
 ls v;
 ws bias;
}


:start
// if t != t//2
cmp_eq time t_half
// u = bias
skp_c 3
rmw_ca 0
rdc_da 0
jmp lifdyn
// else do
mov u charging_bias
//shl u 6
rmw_ca 0
rdc_da 0
jmp lifdyn


:lifdyn
//shl da 6           // multiply da by 64
mul_rz 12 u du     // multiply u by fixed-point [0,1)
adl_sat da         // add da to u
mul_rz 12 v dv     // multiply v by fixed-point [0,1)
adl_sat u          // add u to v
adl_sat bias       // add bias to v
cmp_gt v vth       // c=v>vth
skp_nc 2           // if cmp_ge failed, skip the spike
mov v 0            // reset
next

:continue
spike 0            // send spike
